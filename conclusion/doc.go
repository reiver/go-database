/*
Package database_conclusion provides a type â€” â€˜database_conclusion.Typeâ€™ â€” that can be one of three kinds of values: â€˜nothingâ€™, â€˜somethingâ€™, â€˜errorâ€™;
where â€˜somethingâ€™ is special (as compared to â€˜option typesâ€™ in other programming languages) in that it doesn't value an inner value.


Nothing

The â€˜nothingâ€™ value for â€˜database_conclusion.Typeâ€™ represents when nothing
has been loaded into â€˜database_conclusion.Typeâ€™.

A variable of type â€˜database_conclusion.Typeâ€™ that has not had anything
/assigned to it starts out with a value of â€˜nothingâ€™. I.e.,:

	var conclusion database_conclusion.Type

You can also assign a value of â€˜nothingâ€™ to a variable of â€˜database_conclusion.Typeâ€™
with code similar to the following:

	conclusion := database_conclusion.Nothing()

This â€˜database_conclusion.Nothing()â€™ can also be used for comparisons. Whether that be
in an if-statement:

	if database_conclusion.Nothing() == conclusion {
		// ...
	}

Or a switch-statement:

	switch conclusion {
	case database_conclusion.Nothing():
		// ...
	default:
		// ...
	}


Something

Type â€˜database_conclusion.Typeâ€™ has a â€˜somethingâ€™ value that is a bit different than what you
might find with â€˜option typesâ€™ in other programming languages.

With â€˜database_conclusion.Typeâ€™ there isn't actually a value for â€˜somethingâ€™. It basically means
that everything was successful.

I.e., the variable was loaded, and there was no error.

You can also assign a value of â€˜somethingâ€™ to a variable of â€˜database_conclusion.Typeâ€™
with code similar to the following:

	conclusion := database_conclusion.Something()

This â€˜database_conclusion.Something()â€™ can also be used for comparisons. Whether that be
in an if-statement:

	if database_conclusion.Something() == conclusion {
		// ...
	}

 Or a switch-statement:

	switch conclusion {
	case database_conclusion.Something():
		// ...
	default:
		// ...
	}


Error

The â€˜errorâ€™ value for â€˜database_conclusion.Typeâ€™ represents when an error.

There was multiple ways of giving a â€˜database_conclusion.Typeâ€™ a value of this kind:

	var err error
	
	// ...
	
	conclusion := database_conclusion.Err(err)

Or:

	conclusion := database_conclusion.Error("an error happened ðŸ˜ž")
Or:

	conclusion := database_conclusion.Errorf("an error happened: %s", msg)

Also, there is a special error that can be created for the when a variable having a
â€˜nothingâ€™ value is an error (and thus is not loaded):

	conclusion := database_conclusion.ErrorNotLoaded("database_transaction: not loaded")

Why this special error is important is that it can be detected with a type switch. I.e.,:

	var conclusion database_conclusion.Type
	
	// ...
	
	if err := conclusion.Return(); nil != er {
		switch err.(type) {
		case database_conclusion.NotLoaded:
			//@TODO - not loaded
			return err
		default:
			//@TODO - a normal error
			return err
		}
	}

Example

Here is an example of how â€˜database_conclusion.Typeâ€™ might be used:

	var conclusion database_conclusion.Type = database.Open(driverName, dataSourceName).QueryRow(query).Scan(&id)

	if err := conclusion.Return(); nil != err {
		return err
	}
*/
package database_conclusion
